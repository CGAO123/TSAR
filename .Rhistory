raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
test <- raw_data %>%
filter(Well.Position == "A1") # select data for one well by well ID
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
test <- raw_data %>%
filter(Well Position == "A01") # select data for one well by well ID
test <- raw_data %>%
filter(Well Position == "A1") # select data for one well by well ID
View(raw_data)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
library(dplyr)
library(ggplot2)
library(TSAR)
library(devtools)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
head(test)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write output data file
write_tsar(read_tsar(x, code = 0), name = "1007tm_val", file = "csv")
#write output data file
write_tsar(read_tsar(x, code = 0), name = "vitamin1_tm_val", file = "csv")
View(x)
x[[1]][["tm"]]
x[[1]]
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output, type = "by_template")
#look at only tm result by well
output <- read_tsar(x, code = 0)
?read_tsar()
length(raw_data)
dim(raw_data)
head(raw_data)
unique(raw_data$Well.Position)
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, skip=1)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel)#, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
summarize(x)
summarise(x)
x[[1]]
unique(x[[1]])
unique(x[[2]]$Well.Position)
knitr::opts_chunk$set(echo = TRUE)
raw_data1 <- read.delim(header = TRUE, skip = 144, nrow = 118272, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift_143_1007.txt")
x <- gam_analysis(raw_data1, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write.tsar(read.tsar(x, code = 2), name = "tm_val", file = "csv")
output <- read_tsar(x, code = 2)
tmresult <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/1007Well Information Template.xlsx", output, type = "by_template")
head(tmresult)
raw_data2 <- read.delim(header = TRUE, skip = 144, nrow = 117984, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift_142_1006.txt")
y <- gam_analysis(raw_data2, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write.tsar(read.tsar(x, code = 2), name = "tm_val", file = "csv")
output2 <- read_tsar(y, code = 2)
tmresult2 <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/1007Well Information Template.xlsx", output2, type = "by_template")
head(tmresult2)
?merge_norm
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", skip=1)# header = TRUE)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
unique(x[[2]]$Well.Position)
x[[1]]$tm
length(x[[1]]$tm)
length(unique(x[[2]]$Well.Position))
length(unique(x[[1]]$Well.Position))
data.frame(Well.Position = unique(x[[2]]$Well.Position), TM = x[[1]]$tm)
#write output data file
write_tsar(read_tsar(x, code = 0), name = "vitamin1_tm_val", file = "csv")
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output, type = "by_template")
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write output data file
write_tsar(read_tsar(x, code = 0), name = "vitamin1_tm_val", file = "csv")
length(x[[1]]$tm)
length(unique(x[[2]])$Well.Position)
length(unique(x[[2]]$Well.Position))
unique(x[[2]]$Well.Position)
check <- unique(x[[2]]$Well.Position)
unique(x[[2]]$Well.Position[1,])
check[1,]
check[1]
check[1,length(check)]
check[1,length(check)]
dim(check)
length(check)
check[1:length(check)]
check[2:length(check)]
check[:length(check)-1]
check[0:length(check)-1]
check[1:length(check)-1]
check[!check="Well.Position"]
check[!check=="Well.Position"]
check[!check=="Well Position"]
sprintf("%02s",substr(Wellpos,2,nchar(check)))
?sprintf()
sprintf("%02s",'1')
gettextf('A01')
?gettextf()
str_detect("\nX\n", ".X.")
str_extract(fruit, "nana")
regex("nana")
regexec("nana")
regexec("\nX\n", ".X.")
regexec("\nX\n", ".X.")[[1]][1]
regexec("\nX\n", ".X.")[[1]][4]
regexec("\nX\n", ".X.")[[1]][3]
regexec("\nX\n", ".X.")[[1]][5]
regexec("\nX\n", ".X.")[[1]][2]
regexec("\nX\n", ".X.")[[1]1]
regexec("\nX\n", ".X.")[1]
regexec("\nX\n", ".X.")[1][1]
regexec("\nX\n", ".X.")[1][2]
x<-regexec("\nX\n", ".X.")
x[1]
x[1][1]
x[1][2]
x[[2]]
x[[1,1]]
x[[1]1]
x[[1]][[1]]
regexec("\nX\n", ".X.")[[1]][[4]]
regexec("\nX\n", ".X.")[[1]][[3]]
regexec("\nX\n", ".X.")[[1]][[1]]
regexec("\nX\n", ".X.")[[1]][[2]]
regexec("\nX\n", ".X.")[[1]][2
]
regexec("\nX\n", ".X.")
regexec("\X\", ".X.")
regexec("X", ".X.")
regexec("X", ".X....")
?regex
?regexec
regexec("%s%sd%d", "A01")
regexec("%s%sd%d", "A11")
regexec("%s%sd%d", "A111")
regexec("%s%d%d", "A111")
regexec("%s%02d", "A111")
regexec("%s%02d", "A11")
regexec("%s%d", "A11")
regexec("%s%d", "A11a")
regexec("%s%d", "well")
gregexpr(pattern='\w\d', 'A1')
gregexpr(pattern='\w', 'A1')
gregexpr(pattern='w', 'A1')
gregexpr(pattern='%w', 'A1')
gregexpr(pattern='%w', '')
grepl("%s","A01")
grepl("%s%d","A01")
grepl("%s","A")
grepl("s","A")
grepl("\s","A")
grepl("\w","A")
grepl("%w","A")
grepl("[A-Z]+[0-9]+[0-9]","A")
grepl("[A-Z]+[0-9]+[0-9]","A01")
grepl("[A-Z]+[0-9]+[0-9]","A01a")
grepl("[A-Z]+[0-9]+[0-9]\n","A01a")
grepl("[A-Z]+[0-9]+[0-9]\n","Ac01a")
grepl("[A-Z]+[0-9]+[0-9]\n","Ac01")
grepl("[A-Z]+[0-9]+[0-9]\n","a01")
grepl("[a-Z]+[0-9]+[0-9]\n","a01")
check[grepl("[A-Z]+[0-9]+[0-9]\n", check)]
grepl("[A-Z]+[0-9]+[0-9]\n", check)
check
grepl("[A-Z]+[0-9]+[0-9]\n", check[1])
check[1]
grepl("[A-Z]+[0-9]+[0-9]\n", "A01")
grepl("[A-Z]+[0-9]+[0-9]\", "A01")
grepl("[A-Z]+[0-9]+[0-9]", "A01")
grepl("[A-Z]+[0-9]+[0-9]/", "A01")
grepl("/[A-Z]+[0-9]+[0-9]/", "A01")
grepl("/[A-Z]+[0-9]+[0-9]", "A01")
grepl("[A-Z]+[0-9]+[0-9]", "A01")
grepl("[A-Z]+[0-9]+[0-9]", "A01a")
grepl("[A-Z]+[0-9]+[0-9]", "A0")
grepl("[A-Z]+[0-9]+[0-9]", "well")
grepl("[A-Z]+[0-9]+[0-9]", "w0ell")
grepl("[A-Z]+[0-9]+[0-9]", "w01ell")
grepl("[A-Z]+[0-9]+[0-9]", "w01")
grepl("[A-Z]+[0-9]+[0-9]", "W01")
grepl("[A-Z]+[0-9]+[0-9]", "W01ell")
grepl("[A-Z]+[0-9]+[0-9]\n", "W01ell")
grepl("[A-Z]+[0-9]+[0-9]\n", "W01")
grepl("\[A-Z]+[0-9]+[0-9]\n", "W01")
grepl("[A-Z]+[0-9]+[0-9]$", "W01")
grepl("[A-Z]+[0-9]+[0-9]$", "W01A")
grepl("[A-Z]+[0-9]+[0-9]$", "W01a")
grepl("[A-Z]+[0-9]+[0-9]$", "W011")
grepl("[A-Z]+[0-9]+[0-9]$", "W0111111")
grepl("[A-Z]+[0-9]+[0-9]$", "W01134")
grepl("[A-Z]+[0-9]+[0-9]$", check)
check[grepl("[A-Z]+[0-9]+[0-9]$", check)]
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
unique(x[[2]]$Well.Position)
unique(x[[2]]$Well.Position[grepl("[A-Z]+[0-9]+[0-9]$", x[[2]]$Well.Position)])
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write output data file
write_tsar(read_tsar(x, code = 0), name = "vitamin1_tm_val", file = "csv")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
#raw_data <- read.delim(header = TRUE, skip = 248, nrow = 118368, "/Users/candygao/Desktop/qpcrresult/experiment file/Thermal Shift-91-0930.txt")
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
#raw_data <- read.delim(header = TRUE, skip = 1, file = "/Users/candygao/Desktop/raw.txt")
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
test <- normalize(test, Fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel, smoothed="Fluorescence")
Tm_est(test)
#graphing
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
#geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = Tm_est(test), color = "red") #tm temperature value
result
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write output data file
write_tsar(read_tsar(x, code = 0), name = "vitamin1_tm_val", file = "csv")
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
#run analysis
x <- gam_analysis(raw_data, smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
#write output data file
write_tsar(read_tsar(x, code = 0), name = "vitamin1_tm_val", file = "csv")
knitr::opts_chunk$set(echo = TRUE)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE)
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE)
raw_data2 <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/vitamin2_17_RawData_Thermal Shift_02_171.eds.csv", header = TRUE)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
install.packages("lintr")
library(lintr)
lintr::use_lintr(type = "tidyverse")
license("methods")
license("dplyr")
?license
RShowDoc("GPL-3")
license('dplyr')
license('DPLYR')
packageDescription("stats", fields="License")
packageDescription("methods", fields="License")
packageDescription("dplyr", fields="License")
packageDescription("mgcv", fields="License")
packageDescription("ggpubr", fields="License")
packageDescription("readr", fields="License")
packageDescription("readxl", fields="License")
packageDescription("stringr", fields="License")
packageDescription("tidyr", fields="License")
packageDescription("utils", fields="License")
library(lintr)
pwd()
pwd
getwd()
setwd("/Users/candygao/Desktop/TSAR-main")
lint_package()
lint_package()
lint_package()
lint_package()
lint_package()
lint_package()
lint_package()
lint_package()
lint_package()
?TSA_wells_plot()
?TSA_wells_plot()
tools::findHTMLlinks(level = 2)
?gam()
library(TSAR)
?TSA_wells_plot()
?gam()
?mutate()
?transmutate()
?dplyr::transmute()
?dplyt::mutate()
?dplyr::mutate()
?dplyr::transmute()
?gam()
rd_file <- system.file("man", "gam.Rd", package = "mgcv")
print(rd_file)
help_page <- help("gam", package = "mgcv")
print(help_page[["file"]])
print(help_page)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?TSA_wells_plot()
library(TSAR)
?TSA_wells_plot()
?TSA_wells_plot()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
?TSA_wells_plot()
?gam()
?tsa_average
?tsa_average()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
?tsa_average()
devtools::build()
?tsa_average()
library(TSAR)
?tsa_average()
?tsa_average
??tsa_average
??TSAR
??TSAR
devtools::install()
??TSAR
help(package=TSAR)
