#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "Fluorescence",
control_condition = control_ID)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118177)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "Fluorescence",
control_condition = control_ID)
well_info <- data.frame(
Well = c("A1", "B2", "C3"),
Protein = c("Protein1", "Protein2", "Protein3"),
Ligand = c("Ligand1", "Ligand2", "Ligand3")
)
well_info <- well_info %>%
dplyr::select(c('Well', 'Protein'))
well_info
?mergeTSA()
?merge_tsa()
??merge_tsa()
devtools::document()
devtools::load_all()
devtools::build()
lint_package()
devtools::load_all()
devtools::document()
lint_package()
devtools::document()
lint_package()
devtools::document()
lint_package()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118177)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "Fluorescence",
control_condition = control_ID)
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118177)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
devtools::document()
devtools::load_all()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118177)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "Fluorescence",
control_condition = control_ID)
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
devtools::document()
devtools::load_all()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118177)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
?merge_tsa()
roxygen2::roxygenise()
?merge_tsa()
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
?merge_tsa()
??TSAR
?normalize()
??normalize()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
read_
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
devtools::check()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
lint_package()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118177)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
lint_package()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
remove.packages("TSAR")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
tm_est(test)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
