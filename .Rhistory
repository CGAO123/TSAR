knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
screen(raw_data, checklist = c('C04','B04','C01','C02'))
remove_raw(raw_data, removelist = c('C04','B04','C01','C02'))
removelist = c('C04','B04','C01','C02')
filter(raw_data, !Well %in% removelist)
removelist = c('A01')
filter(raw_data, !Well %in% removelist)
filter(raw_data, !Well.Position %in% removelist)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
shiny::runApp(myApp)
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
View(raw_data)
remove_raw(raw_data, removelist = c('C04','B04','C01','C02'))
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
t_data <- remove_raw(raw_data, removelist = c('C04','B04','C01','C02'))
myApp <- weed_raw(t_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
devtools:do
devtools:document()
devtools::document()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
raw_data[Well.Position == "C01"]
raw_data[Well.Position = "C01"]
raw_data[Well.Position = "C01",]
raw_data[raw_data$Well.Position = "C01",]
raw_data[raw_data$Well.Position == "C01"]
factor(raw_data$Well.Position)
names(factor(raw_data$Well.Position))
summary(factor(raw_data$Well.Position))
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
screen(raw_data)
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","8"))
shiny::runApp(myApp)
t_data <- remove_raw(raw_data, removelist = c('C04','B04','C01','C07','C08','C02','C03','B07','C06','C05','B06','B08','B05','B02','B01','B03'))
screen(t_data)
screen(t_data, checklist = c('C04','B04','C01','C02'))
screen(t_data,  checkrange= c("A","C","1","8"))
remove_raw(raw_data, removerange = c("D","H","1","12"))
t_data <- remove_raw(raw_data, removelist = c('C04','B04','C01','C07','C08','C02','C03','B07','C06','C05','B06','B08','B05','B02','B01','B03'))
t_data <- remove_raw(t_data, removerange = c("D","H","1","12"))
screen(t_data,  checkrange= c("A","C","1","8"))
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(raw_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118177)
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin") #%>%
# filter(well_ID != "A12_CA FL_PyxINE HCl_20230203")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
test_outlier <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 0), type = "by_template")
error <- conclusion %>% filter(condition_ID == 'CA FL_PyxINE HCl')
TSA_wells_plot(error, separate_legend = FALSE)
screen(conclusion, tobechecked = c("A01", "A02", "A03", "A04"))
screen(raw_data_rep)
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118176)
screen(raw_data_rep)
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(t_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","12"))
shiny::runApp(myApp)
t_data <- remove_raw(raw_data, removelist = c('C04','B04','C03','C11','C09','C02','C12','C01',
'C10','C08','B11','C05','C07','C06','B10','B07',
'B09','B12','B06','B08','B05','B03','B02','B01'))
t_data <- remove_raw(t_data, removerange = c("D","H","1","12"))
screen(t_data,  checkrange= c("A","C","1","8"))
screen(t_data,  checkrange= c("A","C","1","12"))
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(t_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118176)
screen(raw_data_rep)
raw_data_rep <- remove_raw(raw_data_rep, removerange = c("B","H","1","12"))
myApp <- weed_raw(raw_data_rep)
shiny::runApp(myApp)
remove_raw(raw_data_rep, removelist = 'A12')
raw_data_rep <- remove_raw(raw_data_rep, removelist = 'A12')
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin") #%>%
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
test_outlier <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 0), type = "by_template")
error <- conclusion %>% filter(condition_ID == 'CA FL_PyxINE HCl')
TSA_wells_plot(error, separate_legend = FALSE)
head(test_outlier)
screen(conclusion, checklist = c("A01", "A02", "A03", "A04"))
screen(conclusion, checklist = c("A11", "A12"))
TSA_wells_plot(error, separate_legend = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","12"))
shiny::runApp(myApp)
t_data <- remove_raw(raw_data, removelist = c('C04','B04','C03','C11','C09','C02','C12','C01',
'C10','C08','B11','C05','C07','C06','B10','B07',
'B09','B12','B06','B08','B05','B03','B02','B01'))
t_data <- remove_raw(t_data, removerange = c("D","H","1","12"))
screen(t_data,  checkrange= c("A","C","1","12"))
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(t_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118176)
screen(raw_data_rep)
raw_data_rep <- remove_raw(raw_data_rep, removerange = c("B","H","1","12"))
myApp <- weed_raw(raw_data_rep)
shiny::runApp(myApp)
raw_data_rep <- remove_raw(raw_data_rep, removelist = 'A12')
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
test_outlier <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 0), type = "by_template")
error <- conclusion %>% filter(condition_ID == 'CA FL_PyxINE HCl')
TSA_wells_plot(error, separate_legend = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","12"))
shiny::runApp(myApp)
lint_package()
library(lintr)
lint_package()
ggplot(data = raw_data, aes(x = Temperature,
y = Fluorescence,
color = Well.Position)) +
geom_point(shape = 1)
ggplot(data = raw_data, aes(x = Temperature,
y = Fluorescence,
color = Well.Position)) +
geom_point(shape = 1, size = 0.5)
ggplot(data = raw_data, aes(x = Temperature,
y = Fluorescence,
color = Well.Position)) +
geom_line(shape = 1, size = 0.5)
ggplot(data = raw_data, aes(x = Temperature,
y = Fluorescence,
color = Well.Position)) +
geom_line(size = 0.5)
ggplot(data = raw_data, aes(x = Temperature,
y = Fluorescence,
color = Well.Position)) +
geom_line(size = 0.2)
devtools::document()
devtools::document()
devtools::document()
update.packages()
update.packages()
devtools::document()
?runjs()
?toJSON
??shinyjs()
devtools::document()
?useShinyjs()
?plotlyOutput()
devtools::document()
devtools::document()
roxygen2::roxygenise()
roxygenize()
library(roxygen2)
roxygenize()
devtools::document()
?merge_tsa()
??TSAR
?weed_raw()
library(TSAR)
?weed_raw()
devtools::document()
?weed_raw()
screen(t_data,  checkrange= c("A","C","1","12"))
t_data <- remove_raw(raw_data,
removelist = c('C04','B04','C03','C11','C09','C02',
'C12','C01','C10','C08','B11','C05',
'C07','C06','B10','B07','B09','B12',
'B06','B08','B05','B03','B02','B01'))
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_local("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(TSAR)
library(dplyr)
library(ggplot2)
raw_data <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_162.eds.csv", header = TRUE, nrows = 118176)
test <- raw_data %>%
filter(Well.Position == "A01") # select data for one well by well ID
#section data by temperature to remove messy area
#test <- subset(test, test$Temperature>40 & test$Temperature <50)
#normalize fluorescence reading into scale between 0 and 1
test <- normalize(test, fluo = 5, selected = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
head(test)
gammodel <- model_gam(test, x = test$Temperature, y = test$Normalized)
test <- model_fit(test, model = gammodel) #, smoothed="Fluorescence")
tm_est(test)
result <- ggplot(data = test, aes(x = Temperature, y = Normalized)) +
geom_point(shape = 1)+ #normalized data
geom_point(aes(y=fitted), color = "blue", alpha = 1/10)+ #fitted value
geom_vline(xintercept = tm_est(test), color = "red") #tm temperature value
result
myApp <- weed_raw(raw_data, checkrange= c("A","C","1","12"))
#shiny::runApp(myApp)
t_data <- remove_raw(raw_data,
removelist = c('C04','B04','C03','C11','C09','C02',
'C12','C01','C10','C08','B11','C05',
'C07','C06','B10','B07','B09','B12',
'B06','B08','B05','B03','B02','B01'))
t_data <- remove_raw(t_data, removerange = c("D","H","1","12"))
screen(t_data,  checkrange= c("A","C","1","12"))
#smoothed = T infers current data is smoothed and no separate gam modeling is needed. If modeling needed, input arguement as smoothed = F
x <- gam_analysis(t_data, smoothed = T, fluo = 5, selections = c("Well.Position", "Temperature", "Fluorescence", "Normalized"))
x <- na.omit(x)
#look at only tm result by well
output <- read_tsar(x, code = 0)
head(output)
tail(output)
#write output data file
write_tsar(read_tsar(x, code = 2), name = "0923_tm_val", file = "csv")
#join protein and ligand information
norm_data <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 2), type = "by_template")
norm_data <- na.omit(norm_data)
head(norm_data)
tail(norm_data)
write_tsar(norm_data, name = "vitamin_tm_val_norm", file = "csv")
raw_data_rep <- read.csv(file = "/Users/candygao/Desktop/qpcrresult/experiment file/Vitamin_RawData_Thermal Shift_02_168.eds.csv", header = TRUE, nrows = 118176)
screen(raw_data_rep)
#remove blank wells and weed out corrupted curves
raw_data_rep <- remove_raw(raw_data_rep, removerange = c("B","H","1","12"))
myApp <- weed_raw(raw_data_rep)
#shiny::runApp(myApp)
raw_data_rep <- remove_raw(raw_data_rep, removelist = 'A12')
analysis_rep <- gam_analysis(raw_data_rep , smoothed = T)
output_rep <- read_tsar(analysis_rep, code = 2)
norm_data_rep <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", output_rep, type = "by_template")
norm_data_rep <- na.omit(norm_data_rep)
norm_data <- na.omit(norm_data)
norm_data_rep <- na.omit(norm_data_rep)
Bigdata <- merge_norm(norm_data, norm_data_rep,
"Vitamin_RawData_Thermal Shift_02_162.eds.csv",
"Vitamin_RawData_Thermal Shift_02_168.eds.csv",
"20230203", "20230209")
condition_IDs(Bigdata)
well_IDs(Bigdata)
conclusion <- Bigdata%>%
filter(condition_ID != "NA_NA") %>%
filter(condition_ID != "CA FL_Riboflavin")
TSA_boxplot(conclusion, color_by = "Protein", label_by = "Ligand", separate_legend = FALSE)
control_ID <- "CA FL_DMSO"
tsa_compare_plot(conclusion,
y = "RFU",
control_condition = control_ID)
test_outlier <- join_well_info("/Users/candygao/Desktop/qpcrresult/experiment file/0203Well Information.xlsx", read_tsar(x, code = 0), type = "by_template")
error <- conclusion %>% filter(condition_ID == 'CA FL_PyxINE HCl')
TSA_wells_plot(error, separate_legend = FALSE)
lint_package()
install.packages("BiocCheck")
install.packages("BiocManager")
library(BiocManager)
library(BiocManager)
BiocManager::setRepositories()
BiocManager::repositories()
BiocManager::install("BiocCheck")
library(BiocCheck)
pwd
getwd()
bioc_check()
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("BiocCheck")
library(BiocCheck)
??BiocCheck
sessionInfo()
BiocCheck("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
BiocCheck("/Users/candygao/Desktop/TSAR_0.1.0.tar.gz")
library(usethis)
use_mit_license(who = c(person(c("William", "M."), "McFadden", email = "wmm27@pitt.edu", role = c("cre", "aut")),
person("Xinlin", "Gao", email = "xgao76@emory.edu", role = c("cre", "aut"))))
use_mit_license(who = c(person(c("William", "M."), "McFadden", email = "wmm27@pitt.edu", role = c("cre", "aut")),
person("Xinlin", "Gao", email = "xgao76@emory.edu", role = "aut")))
?use_mit_license
?use_lgpl_license()
authors <- list(
person(c("William", "M."), "McFadden", email = "wmm27@pitt.edu", role = c("cre", "aut")),
person("Xinlin", "Gao", email = "xgao76@emory.edu", role = c("cre", "aut"))
)
use_description(authors = authors)
authorss <- list(
person(c("William", "M."), "McFadden", email = "wmm27@pitt.edu", role = c("cre", "aut")),
person("Xinlin", "Gao", email = "xgao76@emory.edu", role = c("cre", "aut"))
)
use_description(authors = authorss)
desc <- readLines("DESCRIPTION")
desc
q()
